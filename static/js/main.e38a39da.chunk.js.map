{"version":3,"sources":["App.js","index.js"],"names":["accessKey","process","App","useState","images","setImages","page","setPage","query","setQuery","getImages","useCallback","apiUrl","fetch","then","res","json","data","imagesFromApi","results","useEffect","className","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","dataLength","length","next","hasMore","loader","map","image","index","key","href","links","html","rel","src","urls","regular","alt","alt_description","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAIMA,G,MAAYC,+CAgEHC,MA9Df,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEWF,mBAAS,GAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGaJ,mBAAS,IAHtB,mBAGNK,EAHM,KAGCC,EAHD,KAOPC,EAAYC,uBAAY,WAC5B,IAAIC,EAAM,mCACNJ,IAAOI,EAAM,uDAAmDJ,IAEpEI,GAAM,qBAAkBZ,GACxBY,GAAM,gBAAaN,GAEnBO,MAAMD,GACHE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAS,IAAD,EACNC,EAAa,UAAGD,EAAKE,eAAR,QAAmBF,EACvBZ,EAAL,IAATC,EAAwBY,EAA2B,SAACd,GAAD,4BAAgBA,GAAhB,YAA2Bc,WAElF,CAACZ,EAAME,IAkBV,OAhBAY,qBAAU,WACRV,MACC,CAACJ,EAAMI,IAeR,yBAAKW,UAAU,OACb,uDACA,0BAAMC,SAfV,SAAsBC,GACpBA,EAAEC,iBACFjB,EAAQ,GACRG,MAaI,2BAAOe,KAAK,OAAOC,YAAY,qBAAqBC,MAAOnB,EAAOoB,SAAU,SAAAL,GAAC,OAAId,EAASc,EAAEM,OAAOF,UACnG,2CAEF,kBAAC,IAAD,CACEG,WAAY1B,EAAO2B,OACnBC,KAAM,kBAAMzB,GAAQ,SAAAD,GAAI,OAAIA,EAAO,MACnC2B,SAAS,EACTC,OAAQ,2CACR,yBAAKb,UAAU,cACZjB,EAAO+B,KAAI,SAACC,EAAOC,GAAR,OACV,uBAAGhB,UAAU,QAAQiB,IAAKD,EAAOE,KAAMH,EAAMI,MAAMC,KAAMZ,OAAO,SAASa,IAAI,uBAC3E,yBAAKC,IAAKP,EAAMQ,KAAKC,QAASC,IAAKV,EAAMW,0BCvDvDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.e38a39da.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport './App.css';\r\n\r\nconst accessKey = process.env.REACT_APP_UNSPLASH_ACCESS_KEY;\r\n\r\nfunction App() {\r\n  const [images, setImages] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [query, setQuery] = useState('');\r\n\r\n  // fix \"React Hook useEffect has a missing dependency\" warning \r\n  // by memoizing the getImages function \r\n  const getImages = useCallback(() => {\r\n    let apiUrl = `https://api.unsplash.com/photos?`;\r\n    if (query) apiUrl = `https://api.unsplash.com/search/photos?query=${query}`;\r\n\r\n    apiUrl += `&client_id=${accessKey}`;\r\n    apiUrl += `&page=${page}`;\r\n\r\n    fetch(apiUrl)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        const imagesFromApi = data.results ?? data;\r\n        (page === 1) ? setImages(imagesFromApi) : setImages((images) => [...images, ...imagesFromApi]);\r\n      });\r\n  }, [page, query]);\r\n\r\n  useEffect(() => {\r\n    getImages();\r\n  }, [page, getImages]);\r\n\r\n  function searchImages(e) {\r\n    e.preventDefault();\r\n    setPage(1);\r\n    getImages();\r\n  }\r\n\r\n  if (!accessKey) {\r\n    return (\r\n      <a href=\"https://unsplash.com/developers\" className=\"error\">Required: Get your Unsplash API KEY first!</a>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Unsplash Image Gallery!</h1>\r\n      <form onSubmit={searchImages}>\r\n        <input type=\"text\" placeholder=\"Search Unsplash...\" value={query} onChange={e => setQuery(e.target.value)} />\r\n        <button>Search</button>\r\n      </form>\r\n      <InfiniteScroll\r\n        dataLength={images.length}\r\n        next={() => setPage(page => page + 1)}\r\n        hasMore={true}\r\n        loader={<h4>Loading...</h4>}>\r\n        <div className=\"image-grid\">\r\n          {images.map((image, index) => (\r\n            <a className=\"image\" key={index} href={image.links.html} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              <img src={image.urls.regular} alt={image.alt_description} />\r\n            </a>\r\n          ))}\r\n        </div>\r\n      </InfiniteScroll >\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}